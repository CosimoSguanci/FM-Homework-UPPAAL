<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>/************************************/
/*     Custom types declaration     */
/************************************/

typedef struct {
    int row;
    int col;
} position;

typedef struct {
    position pos;
    bool taken;
} pod;

/*************************************/
/*       Functions declaration       */
/*************************************/

position createPosition(int row, int col) {
    position pos;
    pos.row = row;
    pos.col = col;
    return pos;
}

/*************************************/
/*       Constants declaration       */
/*************************************/

const int N = 10;
const int M = 10;

const int NUM_OF_PODS = 30;

const int ROW_ENTRY_POINT = 0;
const int COL_ENTRY_POINT = 9;
const int ROW_DELIVERY_POINT = 9;
const int COL_DELIVERY_POINT = 9;
const int NUM_OF_ROBOTS = 3;

const int EMPTY = 0;
const int ROBOT = 1;
const int POD = 2;


const position entryPoint = createPosition(ROW_ENTRY_POINT, COL_ENTRY_POINT);
const position deliveryPoint = createPosition(ROW_DELIVERY_POINT, COL_DELIVERY_POINT);


const int grid[N][M] = {
    {POD, POD, POD, POD, POD, POD, EMPTY, EMPTY, EMPTY, EMPTY},
    {EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY},
    {POD, POD, POD, POD, POD, POD, EMPTY, EMPTY, EMPTY, EMPTY},
    {EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY},
    {POD, POD, POD, POD, POD, POD, EMPTY, EMPTY, EMPTY, EMPTY},
    {EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY},
    {POD, POD, POD, POD, POD, POD, EMPTY, EMPTY, EMPTY, EMPTY},
    {EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY},
    {POD, POD, POD, POD, POD, POD, EMPTY, EMPTY, EMPTY, EMPTY},
    {EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY}
};

const pod pods[NUM_OF_PODS] = {
    {{1, 0}, false}, {{1, 1}, false}, {{1, 2}, false}, {{1, 3}, false},
    {{1, 4}, false}, {{1, 5}, false}, {{3, 0}, false}, {{3, 1}, false},
    {{3, 2}, false}, {{3, 3}, false}, {{3, 4}, false}, {{3, 5}, false},
    {{5, 0}, false}, {{5, 1}, false}, {{5, 2}, false}, {{5, 3}, false},
    {{5, 4}, false}, {{5, 5}, false}, {{7, 0}, false}, {{7, 1}, false},
    {{7, 2}, false}, {{7, 3}, false}, {{7, 4}, false}, {{7, 5}, false},
    {{9, 0}, false}, {{9, 1}, false}, {{9, 2}, false}, {{9, 3}, false},
    {{9, 4}, false}, {{9, 5}, false}
};

const position nextPositions[NUM_OF_ROBOTS] = {
    createPosition(-1, -1),
    createPosition(-1, -1),
    createPosition(-1, -1)
}; // set by each robot, read by the semaphore

const int MAX_T = 50;

chan go, takeItem, claim, noTask, releaseTask;


/*************************************/
/*       Channels declaration        */
/*************************************/</declaration>
	<template>
		<name>Semaphore</name>
		<location id="id0" x="0" y="0">
		</location>
		<init ref="id0"/>
	</template>
	<template>
		<name>Human</name>
		<parameter>int H</parameter>
		<declaration>clock t;</declaration>
		<location id="id1" x="-229" y="-85">
			<name x="-272" y="-102">Idle</name>
		</location>
		<location id="id2" x="-42" y="-85">
			<name x="-52" y="-119">Taking_item</name>
			<label kind="invariant" x="-52" y="-68">t &lt;= H</label>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-153" y="-17">t &gt;= H</label>
			<label kind="synchronisation" x="-144" y="0">go!</label>
			<nail x="-136" y="-25"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-170" y="-187">takeItem?</label>
			<label kind="assignment" x="-153" y="-170">t = 0</label>
			<nail x="-136" y="-144"/>
		</transition>
	</template>
	<template>
		<name>Robot</name>
		<parameter>int entryPoint, int deliveryPoint</parameter>
		<location id="id3" x="0" y="0">
		</location>
		<init ref="id3"/>
	</template>
	<template>
		<name>TaskManager</name>
		<parameter>int T</parameter>
		<declaration>clock t;

//this is a queue which works with a FIFO policy
position tasks[MAX_T];
int actualLenght = 0;

//This checks the position of the pod
//to understand if the pod is the same of the pod in position i
//inside the tasks queue
bool checkIdentity(pod myPod, int i) {
    if (myPod.pos.row == tasks[i].row) {
        if (myPod.pos.col == tasks[i].col) {
            return true;
        }
    }
    return false;
}

//This verify if the pod in input is present in the queue
//checking all the tasks array
bool thisPodIsPresentInTasks(pod myPod) {
    int i;
    for (i = 0; i &lt; actualLenght; i++) {
        if (checkIdentity(myPod, i)) {
            return true;
        }
    }
    return false;
}

//find another "random" number adding 1 to the previous random number
int anotherTmp(int tmp) {
    int myTmp = tmp;
    if (tmp == NUM_OF_PODS - 1)
        myTmp = 0;
    else
        myTmp += 1;
    return myTmp;
}

//returning the position of the selected pod from the global pods array
//if it is not taken
//else continuing searching until this function finds a pod to add as a task
position selectAPod(int tmp) {
    int myTmp = tmp;
    bool in = true;
    position newPos = {-1, -1};
    while (in) {
        if (!thisPodIsPresentInTasks(pods[myTmp])) {
            if (!pods[myTmp].taken) {
                newPos.row = pods[myTmp].pos.row;
                newPos.col = pods[myTmp].pos.col;
                in = false;
            }
        }
        myTmp = anotherTmp(myTmp);
    }
    return newPos;
}

//adding a task
void addTask(int tmp) {
    position taskPos = selectAPod(tmp);
    actualLenght += 1;
    tasks[actualLenght] = taskPos;
}

//estract a task from the queue
void takeTask() {}</declaration>
		<location id="id4" x="-229" y="-119">
			<name x="-239" y="-153">Idle</name>
		</location>
		<location id="id5" x="25" y="-119">
			<name x="42" y="-127">Adding_task</name>
			<committed/>
		</location>
		<location id="id6" x="-229" y="93">
			<name x="-272" y="110">Releasing_task</name>
			<committed/>
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id6"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-391" y="-17">releaseTask!</label>
			<nail x="-323" y="-8"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-272" y="-17">noTask!</label>
			<nail x="-280" y="-8"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-170" y="-8">claim?</label>
			<nail x="-170" y="-8"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="select" x="-110" y="-51">tmp: int[0,NUM_OF_PODS]</label>
			<label kind="assignment" x="-93" y="-25">t = 0, addTask(tmp)</label>
			<nail x="-110" y="-42"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-127" y="-204">t &gt;= T</label>
			<nail x="-110" y="-187"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

h = Human(10);

// List one or more processes to be composed into a system.
system h;
    </system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
